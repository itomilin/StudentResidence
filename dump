--
-- PostgreSQL database dump
--

-- Dumped from database version 13.2
-- Dumped by pg_dump version 13.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: cleanup_room(integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.cleanup_room(r_id integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	delete from studentsRooms
	where room_id=r_id;
END;$$;


ALTER PROCEDURE public.cleanup_room(r_id integer) OWNER TO postgres;

--
-- Name: find_by_birthday(date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.find_by_birthday(birth_day date) RETURNS TABLE(id integer, surname character varying, name character varying, middlename character varying, birthday date, phonenumber character varying, course integer, studentgroup character varying, numberofroom integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	select students.id,
	   students.surname,
	   students.name,
	   students.middleName,
	   students.birthDay,
	   students.phoneNumber,
	   students.course,
	   students.studentGroup,
	   rooms.numberOfRoom
	from students
	left join studentsRooms
	on studentsRooms.student_id = students.id
	left join rooms
	on rooms.id = studentsRooms.room_id
	where students.birthday=birth_day;
END;$$;


ALTER FUNCTION public.find_by_birthday(birth_day date) OWNER TO postgres;

--
-- Name: find_by_course(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.find_by_course(s_course integer) RETURNS TABLE(id integer, surname character varying, name character varying, middlename character varying, birthday date, phonenumber character varying, course integer, studentgroup character varying, numberofroom integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	select students.id,
	   students.surname,
	   students.name,
	   students.middleName,
	   students.birthDay,
	   students.phoneNumber,
	   students.course,
	   students.studentGroup,
	   rooms.numberOfRoom
	from students
	left join studentsRooms
	on studentsRooms.student_id = students.id
	left join rooms
	on rooms.id = studentsRooms.room_id
	where students.course=s_course;
END;$$;


ALTER FUNCTION public.find_by_course(s_course integer) OWNER TO postgres;

--
-- Name: find_by_group(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.find_by_group(s_group character varying) RETURNS TABLE(id integer, surname character varying, name character varying, middlename character varying, birthday date, phonenumber character varying, course integer, studentgroup character varying, numberofroom integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	select students.id,
	   students.surname,
	   students.name,
	   students.middleName,
	   students.birthDay,
	   students.phoneNumber,
	   students.course,
	   students.studentGroup,
	   rooms.numberOfRoom
	from students
	left join studentsRooms
	on studentsRooms.student_id = students.id
	left join rooms
	on rooms.id = studentsRooms.room_id
	where students.studentgroup=s_group;
END;$$;


ALTER FUNCTION public.find_by_group(s_group character varying) OWNER TO postgres;

--
-- Name: find_by_room(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.find_by_room(num_room integer) RETURNS TABLE(id integer, surname character varying, name character varying, middlename character varying, birthday date, phonenumber character varying, course integer, studentgroup character varying, numberofroom integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
	SELECT students.id,
	   students.surname,
	   students.name,
	   students.middleName,
	   students.birthDay,
	   students.phoneNumber,
	   students.course,
	   students.studentGroup,
	   rooms.numberOfRoom
	from students
	left join studentsRooms
	on studentsRooms.student_id = students.id
	left join rooms
	on rooms.id = studentsRooms.room_id
	WHERE rooms.numberOfRoom = num_room;
END;$$;


ALTER FUNCTION public.find_by_room(num_room integer) OWNER TO postgres;

--
-- Name: find_by_surname(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.find_by_surname(s_surname character varying) RETURNS TABLE(id integer, surname character varying, name character varying, middlename character varying, birthday date, phonenumber character varying, course integer, studentgroup character varying, numberofroom integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	select students.id,
	   students.surname,
	   students.name,
	   students.middleName,
	   students.birthDay,
	   students.phoneNumber,
	   students.course,
	   students.studentGroup,
	   rooms.numberOfRoom
	from students
	left join studentsRooms
	on studentsRooms.student_id = students.id
	left join rooms
	on rooms.id = studentsRooms.room_id
	where students.surname=s_surname;
END;$$;


ALTER FUNCTION public.find_by_surname(s_surname character varying) OWNER TO postgres;

--
-- Name: forbidden_add_students(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.forbidden_add_students() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE defaultSeats integer;
DECLARE	currentSeats integer;
BEGIN

-- Считаем количество занятых мест на текущий момент
-- и записываем в переменную currentSeats
select CAST(count(room_id) as integer)
into currentSeats
from studentsRooms
where room_id=new.room_id;

-- Делаем запрос к таблице комнаты и получаем
-- количество комнат по умолчанию
select seatsCount
into defaultSeats
from rooms
where id=new.room_id;

-- Если количество текущих мест меньше чем указано
-- в таблице rooms, тогда добавляем
if currentSeats < defaultSeats
then
	return NEW;
else
	RAISE EXCEPTION 'Room ID=% is full', NEW.room_id;
end if;

END;
$$;


ALTER FUNCTION public.forbidden_add_students() OWNER TO postgres;

--
-- Name: move_student(integer, integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.move_student(s_id integer, new_room_id integer)
    LANGUAGE plpgsql
    AS $$
DECLARE old_id integer;
BEGIN
	SELECT room_id
	INTO old_id
	FROM studentsRooms
	WHERE student_id=s_id;
	
	DELETE FROM studentsRooms
	WHERE room_id=old_id AND student_id=s_id;
	
	INSERT INTO studentsRooms(room_id, student_id)
	VALUES (new_room_id, s_id);
END;$$;


ALTER PROCEDURE public.move_student(s_id integer, new_room_id integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: rooms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.rooms (
    id integer NOT NULL,
    numberofroom integer NOT NULL,
    seatscount integer NOT NULL
);


ALTER TABLE public.rooms OWNER TO postgres;

--
-- Name: rooms_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.rooms_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rooms_id_seq OWNER TO postgres;

--
-- Name: rooms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.rooms_id_seq OWNED BY public.rooms.id;


--
-- Name: students; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.students (
    id integer NOT NULL,
    name character varying NOT NULL,
    middlename character varying NOT NULL,
    surname character varying NOT NULL,
    birthday date NOT NULL,
    phonenumber character varying,
    course integer NOT NULL,
    studentgroup character varying NOT NULL
);


ALTER TABLE public.students OWNER TO postgres;

--
-- Name: studentsrooms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.studentsrooms (
    id integer NOT NULL,
    room_id integer NOT NULL,
    student_id integer NOT NULL
);


ALTER TABLE public.studentsrooms OWNER TO postgres;

--
-- Name: show_students_without_room; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.show_students_without_room AS
 SELECT students.id,
    students.surname,
    students.name,
    students.middlename,
    students.birthday,
    students.phonenumber,
    students.course,
    students.studentgroup
   FROM (public.studentsrooms
     RIGHT JOIN public.students ON ((students.id = studentsrooms.student_id)))
  WHERE (studentsrooms.id IS NULL);


ALTER TABLE public.show_students_without_room OWNER TO postgres;

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.students_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO postgres;

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.students_id_seq OWNED BY public.students.id;


--
-- Name: studentsrooms_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.studentsrooms_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studentsrooms_id_seq OWNER TO postgres;

--
-- Name: studentsrooms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.studentsrooms_id_seq OWNED BY public.studentsrooms.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    user_name character varying NOT NULL,
    password character varying NOT NULL,
    role character varying NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: rooms id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rooms ALTER COLUMN id SET DEFAULT nextval('public.rooms_id_seq'::regclass);


--
-- Name: students id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.students ALTER COLUMN id SET DEFAULT nextval('public.students_id_seq'::regclass);


--
-- Name: studentsrooms id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.studentsrooms ALTER COLUMN id SET DEFAULT nextval('public.studentsrooms_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: rooms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.rooms (id, numberofroom, seatscount) FROM stdin;
2	21	3
3	51	2
4	11	5
22	112	2
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.students (id, name, middlename, surname, birthday, phonenumber, course, studentgroup) FROM stdin;
1	Vadim	Fedorovich	Ivanov	1995-10-20	+79314567811	3	323
3	Igor	Petrovich	Sidorov	1995-10-20	+79326666112	3	323
2	Nikita	Alexeevich	Rusanov	1995-10-20	+79314567812	3	323
4	Alexandr	Dmitrievich	Semenov	1995-09-20	+79995417811	4	oit425
\.


--
-- Data for Name: studentsrooms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.studentsrooms (id, room_id, student_id) FROM stdin;
35	3	1
45	22	2
46	3	4
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, user_name, password, role) FROM stdin;
1	user	$HASH|V1$10000$ALYlkowWy5kHJLKszkNt8Bnsj4cheTJV8/0ylIOkTLyeYFsS	user
2	root	$HASH|V1$10000$lebAoR/cDyt1uQs16JlEOw5Bl2pYrF9TPU+bS1678eN1ZGQo	admin
\.


--
-- Name: rooms_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.rooms_id_seq', 22, true);


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.students_id_seq', 11, true);


--
-- Name: studentsrooms_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.studentsrooms_id_seq', 54, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 2, true);


--
-- Name: rooms rooms_numberofroom_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rooms
    ADD CONSTRAINT rooms_numberofroom_key UNIQUE (numberofroom);


--
-- Name: rooms rooms_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rooms
    ADD CONSTRAINT rooms_pkey PRIMARY KEY (id);


--
-- Name: students students_phonenumber_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_phonenumber_key UNIQUE (phonenumber);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: studentsrooms studentsrooms_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.studentsrooms
    ADD CONSTRAINT studentsrooms_pkey PRIMARY KEY (id);


--
-- Name: studentsrooms studentsrooms_student_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.studentsrooms
    ADD CONSTRAINT studentsrooms_student_id_key UNIQUE (student_id);


--
-- Name: users users_user_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_name_key UNIQUE (user_name);


--
-- Name: studentsrooms check_seats; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER check_seats BEFORE INSERT ON public.studentsrooms FOR EACH ROW EXECUTE FUNCTION public.forbidden_add_students();


--
-- Name: studentsrooms studentsrooms_room_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.studentsrooms
    ADD CONSTRAINT studentsrooms_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id);


--
-- Name: studentsrooms studentsrooms_student_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.studentsrooms
    ADD CONSTRAINT studentsrooms_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

